

######################## 방법1 : back end ########################

1. 용도
   개인 프로젝트에서 많이 사용하는 방법

2. 전체적인 흐름
   GitHub 에 push -> GithubAction 이벤트 감지 -> Git pull EC2

3. 장점
   - git pull 을 활용해서 변경된 부분의 프로젝트 코드에 대해서만
     업데이트를 하기 때문에 CI/CD 속도가 빠름.
     대분의 CI/CD 방식은 전체 프로젝트를 통째로 갈아끼우는 방식임.
   - GithubAction 만 사용하기 때문에 인프라 구조가 복작하지 않고 간단.

4. 단점
   - 빌드 작업을 EC2에서 직접 진행하기 때문에 운영하고 있는 서버의 성능에
     영향이 있을 수 있음.
   - Github 계정 정보가 EC2에 저장되기 때문에 믿을만할 사람들과 같이
     진행하는 토이 프로젝트에서만 사용해야 함.

5. 언제 사용하면 좋은지
   - 주로 개인프로젝트에서 CI/CD 를 심플하고 빠르게 적용시키고 싶을 때 사용.

6. 실습
   - EC2 생성 및 8080 포트 할당
   - EC2 에 JDK 설치
     sudo apt update
     sudo apt install openjdk-17-jdk -y
     java -version
   - EC2 에서 git clone 해서 프로젝트 다운
     git clone https://github.com/jongyeonsim2/cicd-server2.git
   - github token 발급
   - EC2 에서 build
     ./gradlew clean build // gradlew 실행 권한 에러발생
     chmod +x ./gradlew
     ./gradlew clean build
   - spring boot app 실행
     cd ./build/libs
     nohup java -jar cicd-server-0.0.1-SNAPSHOT.jar &
   - 브라우저에서 spring boot app 접속
     http://54.180.97.183:8080/

     54.180.97.183 는 터미널 윈도우에서 PublicIPs: 54.180.97.183 로 확인.

######################## 방법2 : back end (GithubAction, SCP) ########################

1. 용도
   일반 프로젝트에서 많이 사용하는 방법

2. 전체적인 흐름
   GitHub 에 push -> GithubAction 이벤트 감지 -> 빌드 파일 전송 -> EC2

3. 장점
   - 빌드 작업을 GithubAction에서 하기 때문에 운영하고 있는 서버의 성능에
     영향을 거의 주지 않음.
   - CI/CD 툴로 GithubAction 만 사용하기 때문에 인프라 구조가 복잡하지 않고 간단함.

4. 단점
   - 무중단 배포를 구현하거나 여러 EC2 인스턴스에 배포를 해야하는 상황이라면,
     직접 GithubAction 스크립트를 작성해서 구현해야 함.
     직접 구현을 해보면 알겠지만, 생각보다 꽤 복잡함.

5. 언제 사용하면 좋은지
   - 현업에서 초기 서비스를 구축할 때 많이 활용함.

   - 처음 서비스를 구현할 때는 대규모 서비스에 적합한 구조로 구현하지 않음.
     즉, 오버엔지니어링을 하지 않음. 확장의 필요성이 있다고 느끼는 시점에
     인프라를 고도화하기 시작함.

     복잡한 인프라 구조를 갖추고 관리하는 건 생각보다 여러 측면에서
     신경쓸것이 많아지게 됨.

     a. 인프라 구조를 변경할 때 시간이 많이 들어감.
     b. 에러가 발생했을 때 트러블 슈팅의 어려움.
     c. 팀원이 인프라 구조를 이해하기가 어려워 함.
     d. 기능을 추가하거나 수정할 때 많은 시간이 들어감.
     e. 금전적인 비용이 더 많이 발생할 수 있음.

######################## 방법3 : back end  ########################

1. 용도
   확장성을 고려한 프로젝트에서 많이 사용되는 방법

2. 전체적인 흐름
   GitHub 에 push -> GithubAction 이벤트 감지 -> 빌드 파일 전송 -> S3 -> EC2
                                             -> AWS CodeDeploy
   AWS CodeDeploy : EC2 한테 S3 로부터 빌드 파일을 다운받은 뒤 배포를
                    진행하도록 명령   

3. 사용하는 이유(오버엔지니어링이 아닌 경우)
   - CodeDeploy 는 수많은 AWS EC2 에 배포를 쉽게 할 수 있도록 도와줌.
   - CodeDeploy 에 무중단 배포 기능이 내재되어 있어 손쉽게
     무중단 배포를 진행할 수 임. 

4. 장점
   - 서버가 여러 대이더라도 쉽게 자동 배포를 구축할 수 있음.
   - 쉽게 무중단 배포를 적용실킬 수 있음.

5. 단점
   - CodeDeploy 를 사용함으로써 인프라 구조가 복잡해짐.
     구조가 복잡해짐에 따라 관리할 포이트가 자동적으로 증가하게 됨으로,
     관리 비용, 유지보수 비용, 난이도, 트러블 슈팅 어려움, 복잡도가 증가.

6. 언제 사용하면 좋은지
   - 서버를 여러 대 이상 구동해야 하거나 무중단 배포가 중요한 서비스일 때
     주로 활용함.

######################## 방법4 : back end (Github Actions, Docker) ########################

1. 용도
   컨테이너 기반의 프로젝트에서 많이 사용되는 방법

2. 전체적인 흐름
   GitHub 에 push -> GithubAction 이벤트 감지 -> 빌드 파일 전송 -> AWS ECR
                                             -> AWS EC2

   빌드 파일 : Docker Image 생성 및 Docker Image 를 ECR 로 전달
   GithubAction 이벤트 감지 -> AWS EC2 :
             ECR 로부터 Docker Image 를 다운받아서 배포를 진행하도록 명령

3. 장점
   - Docker 기반으로 서비스를 운영할 때, 가장 간단하게 구성할 수 있는
     인프라 구조임.

4. 단점
   - 무중단 배포를 구현하거나 여러 EC2 인스턴스에 배포를 해야 하는 상황이라면,
     직접 Github Actions 에 스크립트를 작성해서 구현해야 함.
     직접 구현해보면 알겠지만, 생각보다 많이 복잡함.

5. 언제 사용하면 좋은지
   - 컨테이너 기반으로 인프라를 구성했을 때 이 방법을 많이 활용함.
   - 서버를 여러 대 운영하고 있지 않을 정도의 소규모 프로젝트일 때 주로
     활용함.

######################## 방법5 : back end (Github Actions, Docker, CodeDeploy) ########################

1. 용도
   컨테이너 기반의 프로젝트에서 많이 사용되는 방법

2. 전체적인 흐름
   GitHub 에 push -> GithubAction 이벤트 감지 -> 빌드 파일 전송 -> AWS ECR
                                             -> AWS S3
                                             -> AWS CodeDeploy -> AWS EC2 

   빌드 파일 : Docker Image 생성 및 Docker Image 를 ECR 로 전달
   GithubAction 이벤트 감지 -> AWS CodeDeploy -> AWS EC2 :
             EC2 한테 S3 로부터 CodeDeploy 관련 파일을 다운받은 뒤
             AWS ECR 로 부터 Docker Image 다운 후 배포

3. 장점
   - 컨테이너 기반의 서버가 여러 대이더라도 쉽게 자동 배포를 구축할 수 있음.
   - 쉽게 무중단 배포를 적용시킬 수 있음.

4. 단점
   - CodeDeploy 를 사용함으로써 인프라 구조가 복잡해짐.
     구조가 복잡해짐에 따라 관리할 포이트가 자동적으로 증가하게 됨으로,
     관리 비용, 유지보수 비용, 난이도, 트러블 슈팅 어려움, 복잡도가 증가.

5. 언제 사용하면 좋은지
   - 컨테이너 기반의 서버를 여러 대 이상 구동해야 하거나
     무중단 배포가 중요한 서비스일 때 주로 활용됨.


######################## 방법1 : front end (Github Actions, S3, Cloudfront) ########################

1. 전체적인 흐름
   GitHub 에 push -> GithubAction 이벤트 감지 -> 빌드 파일 전송 -> AWS S3
                                             -> Cloudfront

   GithubAction 이벤트 감지 -> Cloudfront : 캐시 무효화 명령