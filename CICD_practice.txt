

######################## 방법1 : back end ########################

1. 용도
   개인 프로젝트에서 많이 사용하는 방법

2. 전체적인 흐름
   GitHub 에 push -> GithubAction 이벤트 감지 -> Git pull EC2

3. 장점
   - git pull 을 활용해서 변경된 부분의 프로젝트 코드에 대해서만
     업데이트를 하기 때문에 CI/CD 속도가 빠름.
     대분의 CI/CD 방식은 전체 프로젝트를 통째로 갈아끼우는 방식임.
   - GithubAction 만 사용하기 때문에 인프라 구조가 복작하지 않고 간단.

4. 단점
   - 빌드 작업을 EC2에서 직접 진행하기 때문에 운영하고 있는 서버의 성능에
     영향이 있을 수 있음.
   - Github 계정 정보가 EC2에 저장되기 때문에 믿을만할 사람들과 같이
     진행하는 토이 프로젝트에서만 사용해야 함.

5. 언제 사용하면 좋은지
   - 주로 개인프로젝트에서 CI/CD 를 심플하고 빠르게 적용시키고 싶을 때 사용.

6. 실습 1 - 몸으로 빌드 및 배포

   - EC2 생성 및 8080 포트 할당
   - EC2 에 JDK 설치
     sudo apt update
     sudo apt install openjdk-17-jdk -y
     java -version
   - EC2 에서 git clone 해서 프로젝트 다운
     git clone https://github.com/jongyeonsim2/cicd-server2.git
   - github token 발급
   - EC2 에서 build
     ./gradlew clean build // gradlew 실행 권한 에러발생
     chmod +x ./gradlew
     ./gradlew clean build
   - spring boot app 실행
     cd ./build/libs
     nohup java -jar cicd-server-0.0.1-SNAPSHOT.jar &
          nohup 으로 실행시 해당 폴더에 log  파일이 생성됨.
     

   - 브라우저에서 spring boot app 접속
     http://54.180.97.183:8080/

     54.180.97.183 는 터미널 윈도우에서 PublicIPs: 54.180.97.183 로 확인.

   - 배포할 때 때마다 git 계정과 token 을 입력해야 하는 불편함이 있어,
     입력하지 않아도 되도록 설정
     git config --global credential.helper store
     git pull origin main
     => github 계정과 token 입력

     git pull origin main
     => github 계정과 token 입력하지 않아도 됨.
     
     github 계정과 token 정보가 아래의 파일에 저장되어 있어,
     보안에 좋지 않음.(CICD 방법 1의 단점)
     cat /home/ubuntu/.git-credentials

   - build 후 재배포
     
        - 8080 port 에서 실행중인 app 종료
          sudo lsof -i:8080          // 8080 으로 실행중인 앱 확인
          sudo fuser -k -n tcp 8080  // 8080 으로 실행중인 앱 종료

        - ./gradlew clean build

        - java -jar cicd-server-0.0.1-SNAPSHOT.jar


2. 실습 2 - 배포 과정 자동화
   - spring boot 프로젝트에 GithubAction 관련 파일 생성

name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: SSH로 EC2에 접속하기
        uses: appleboy/ssh-action@v1.0.3      #SSH 라이브러리
        with:
          host: ${{secrets.EC2_HOST}}         #EC2 의 주소
          username: ${{secrets.EC2_USERNAME}} #EC2 접속 유저
          key: ${{secrets.EC2_PRIVATE_KEY}}   #EC2 접속 key 파일 내용
          script_stop: true # 아래의 실행 script 중 실패하는 명령이 하나라도 있으면 실패로 처리
          script: |
            cd /home/ubuntu/cicd-server2 # 수정된 내용을 pull 하기 위해 프로젝트 폴더로 이동
            git pull origin main         # 변경사항을 pull
            ./gradlew clean build        # build
            sudo fuser -k -n tcp 8080 || true  # 기존에 실행되고 있는 앱 종료. 실행되는 앱이 없더라도 true 로 처리.
            nohup java -jar build/libs/*SNAPSHOT.jar > ./output.log & # 앱 실행 및 로그 파일로 저장

2. 실습 3 - application.properties, application.yml 파일 제외 push
           애플리케이션이 실행시 필요함으로 GithubAction event 발생시
           만들어서 배포가 되도록 해야 함.

name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: SSH로 EC2에 접속하기
        uses: appleboy/ssh-action@v1.0.3      #SSH 라이브러리
        env:
          APPLICATION_PROPERTIES: ${{secrets.APPLICATION_PROPERTIES}}
        with:
          host: ${{secrets.EC2_HOST}}         #EC2 의 주소
          username: ${{secrets.EC2_USERNAME}} #EC2 접속 유저
          key: ${{secrets.EC2_PRIVATE_KEY}}   #EC2 접속 key 파일 내용
          envs: APPLICATION_PROPERTIES
          script_stop: true # 아래의 실행 script 중 실패하는 명령이 하나라도 있으면 실패로 처리
          script: |
            cd /home/ubuntu/cicd-server2 # 수정된 내용을 pull 하기 위해 프로젝트 폴더로 이동
            git pull origin main         # 변경사항을 pull
            echo "$APPLICATION_PROPERTIES" > src/main/resources/application.yml
            ./gradlew clean build        # build
            sudo fuser -k -n tcp 8080 || true  # 기존에 실행되고 있는 앱 종료. 실행되는 앱이 없더라도 true 로 처리.
            nohup java -jar build/libs/*SNAPSHOT.jar > ./output.log 2>&1 & # 앱 실행 및 로그 파일로 저장



######################## 방법2 : back end (GithubAction, SCP) ########################

1. 용도
   일반 프로젝트에서 많이 사용하는 방법

2. 전체적인 흐름
   GitHub 에 push -> GithubAction 이벤트 감지 -> 빌드 파일 전송 -> EC2

3. 장점
   - 빌드 작업을 GithubAction에서 하기 때문에 운영하고 있는 서버의 성능에
     영향을 거의 주지 않음.
   - CI/CD 툴로 GithubAction 만 사용하기 때문에 인프라 구조가 복잡하지 않고 간단함.

4. 단점
   - 무중단 배포를 구현하거나 여러 EC2 인스턴스에 배포를 해야하는 상황이라면,
     직접 GithubAction 스크립트를 작성해서 구현해야 함.
     직접 구현을 해보면 알겠지만, 생각보다 꽤 복잡함.

5. 언제 사용하면 좋은지
   - 현업에서 초기 서비스를 구축할 때 많이 활용함.

   - 처음 서비스를 구현할 때는 대규모 서비스에 적합한 구조로 구현하지 않음.
     즉, 오버엔지니어링을 하지 않음. 확장의 필요성이 있다고 느끼는 시점에
     인프라를 고도화하기 시작함.

     복잡한 인프라 구조를 갖추고 관리하는 건 생각보다 여러 측면에서
     신경쓸것이 많아지게 됨.

     a. 인프라 구조를 변경할 때 시간이 많이 들어감.
     b. 에러가 발생했을 때 트러블 슈팅의 어려움.
     c. 팀원이 인프라 구조를 이해하기가 어려워 함.
     d. 기능을 추가하거나 수정할 때 많은 시간이 들어감.
     e. 금전적인 비용이 더 많이 발생할 수 있음.

6. 실습
   - EC2에서 spring boot app 종료
     sudo lsof -i:8080
     sudo kill PID
     sudo lsof -i:8080

   - 기존 spring boot 프로젝트 폴더 삭제
     rm -rf cicd-server2

   - GithubAction workflow(deploy.yml) 작성

name: Deploy To EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Github Repository 파일 불러오기
        uses: actions/checkout@v4

      - name: JDK17 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: application.yml 파일 만들기
        run: echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.yml

      - name: 테스트 및 빌드하기
        run: |
          chmod +x ./gradlew
          ./gradlew clean build

      - name: 빌드된 파일 이름 변경하기
        run: mv ./build/libs/*SNAPSHOT.jar ./project.jar

      - name: SCP로 EC2에 빌드된 파일 전송하기
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: project.jar
          target: /home/ubuntu/cicd-server2/tobe

      - name: SSH로 EC2에 접속하기
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }} # EC2의 주소
          username: ${{ secrets.EC2_USERNAME }} # EC2 접속 username
          key: ${{ secrets.EC2_PRIVATE_KEY }} # EC2의 Key 파일의 내부 텍스트
          script_stop: true # 아래 script 중 실패하는 명령이 하나라도 있으면 실패로 처리
          script: |
            rm -rf /home/ubuntu/cicd-server2/current
            mkdir /home/ubuntu/cicd-server2/current
            mv /home/ubuntu/cicd-server2/tobe/project.jar /home/ubuntu/cicd-server2/current/project.jar
            cd /home/ubuntu/cide-server2/current
            sudo fuser -k -n tcp 8080 || true
            nohup java -jar project.jar > ./output.log 2>&1 &
            rm -rf /home/ubuntu/cicd-server2/tobe

   - AppController 수정
     브라우저에 출력할 내용 변경

   - GithubAction 진행 상태 확인
   - EC2 서버에 접속해서 build 파일 전송 확인
   - 브라우저로 spring boot 앱에 접속
     

######################## 방법3 : back end  ########################

1. 용도
   확장성을 고려한 프로젝트에서 많이 사용되는 방법

2. 전체적인 흐름
   GitHub 에 push -> GithubAction 이벤트 감지 -> 빌드 파일 전송 -> S3 -> EC2
                                             -> AWS CodeDeploy
   AWS CodeDeploy : EC2 한테 S3 로부터 빌드 파일을 다운받은 뒤 배포를
                    진행하도록 명령   

   AWS CodeDeploy, AWS CodeDeploy Agent( EC2 )

   - GithubAction 은 S3 에 접근할 수 있어야 함. ( 외부에서 AWS 서비스 사용 )
   - GithubAction 은 CodeDeploy 에 접근할 수 있어야 함. ( 외부에서 AWS 서비스 사용 )
   - EC2 는 S3 에 접근할 수 있어야 함. ( AWS 내부에서 AWS 서비스 사용 )
   - CodeDeploy 는 EC2 에 접근할 수 있어야 함. ( AWS 내부에서 AWS 서비스 사용 )
     EC2 한테 S3 에 접속을 해서 build 된 파일을 다운로드 한 뒤
     배포를 진행하도록 명령하기 위함. 이 명령은 CodeDeploy Agent 가 처리함.

   상기의 접속 관계를 이해를 하고, IAM 설정이 필요함.

   2.1 CodeDeploy 의 권한 설정
       EC2 에 접근하기 위함.

   2.2 EC2 역할 생성
       EC2 가 S3에 접근하기 위함.

       - 정책생성
       - 역할생성
       - EC2 Instance 에 생성한 역할을 장착.

   2.3 EC2 에 Code Deploy Agent 설치

cd ~

sudo apt update && 
sudo apt install -y ruby-full wget && 
cd /home/ubuntu && 
wget https://aws-codedeploy-ap-northeast-2.s3.ap-northeast-2.amazonaws.com/latest/install && 
chmod +x ./install && 
sudo ./install auto

systemctl status codedeploy-agent

codedeploy-agent 의 Active: active (running) 상태 확인.

   2.4 GithubAction 의 위한 IAM user 생성.
       - S3 에 접근하기 위함.
       - CodeDeploy 에 접근하기 위함.
       - 역할 할당
         AmazonS3FullAccess
         AWSCodeDeployFullAccess
       - 액세스 키 생성
         액세스 키, 비밀 액세스 키
       - GithubAction secrets로 등록
         액세스 키, 비밀 액세스 키

   2.5 S3 생성


3. 사용하는 이유(오버엔지니어링이 아닌 경우)
   - CodeDeploy 는 수많은 AWS EC2 에 배포를 쉽게 할 수 있도록 도와줌.
   - CodeDeploy 에 무중단 배포 기능이 내재되어 있어 손쉽게
     무중단 배포를 진행할 수 임. 

4. 장점
   - 서버가 여러 대이더라도 쉽게 자동 배포를 구축할 수 있음.
   - 쉽게 무중단 배포를 적용실킬 수 있음.

5. 단점
   - CodeDeploy 를 사용함으로써 인프라 구조가 복잡해짐.
     구조가 복잡해짐에 따라 관리할 포이트가 자동적으로 증가하게 됨으로,
     관리 비용, 유지보수 비용, 난이도, 트러블 슈팅 어려움, 복잡도가 증가.

6. 언제 사용하면 좋은지
   - 서버를 여러 대 이상 구동해야 하거나 무중단 배포가 중요한 서비스일 때
     주로 활용함.

7. AWS IAM 과 AWS 서비스 사용시 관계 설정
   
   7.1 정책, 역할(권한, role), 사용자 관계
       사용자는 역할이 있어야 하고,
       역할은 정책이 있어야 함.

   7.2 AWS 로그인 한 상태에서 AWS 서비스를 사용하는 경우.
       - AWS 내부에서 AWS 서비스를 사용
       - 다른 AWS 서비스를 사용할 경우, 역할을 생성해서, 역할을 내한테 등록해서 사용.
       
   7.3 AWS 와 무관한 서비스, 앱 등에서 AWS 서비스를 사용하는 경우.
       - AWS 외부에서 AWS 서비스를 사용
       - AWS 에 사용자를 생성 후 생성된 사용자를 통해서 AWS 서비스를 사용.

8. 실습
   8.1 appspec.yml
       CodeDeploy Agent 가 실행시 필수적으로 사용된는 파일.
       배포까지 수행함.
   8.2 scripts/start-server.sh
       배포가 끝난 다음은 spring boot app 을 실행.
   8.3 GithubActions 코드 작성.
       .github/workflow/deploy.yml
   8.4 git push
       GithubActions 상태 확인해서 성공 종료여부 확인
       AWS S3 bucket 확인
       AWS CodeDeploy 배포 상태 확인 => 성공이아니면, 실패 원인 확인
       AWS 터미널에서 S3 에서 복사한 파일 확인
       웹 브라우저에서 확인



==================== deploy.yml ====================
name: Deploy To EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Github Repository 파일 불러오기
        uses: actions/checkout@v4

      - name: JDK17 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: application.yml 파일 만들기
        run: echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.yml

      - name: 테스트 및 빌드하기
        run: |
          chmod +x ./gradlew
          ./gradlew clean build

      - name: Test
        run: |
             ls
             pwd

      - name: 빌드된 파일 이름 변경하기
        run: mv ./build/libs/*SNAPSHOT.jar ./project.jar

      - name: 압축하기
        run: tar -czvf $GITHUB_SHA.tar.gz project.jar appspec.yml scripts

      - name: AWS Resource 에 접근할 수 있게 AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: S3에 프로젝트 폴더 업로드하기
        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.tar.gz s3://cicd-server2/$GITHUB_SHA.tar.gz

      - name: Code Deploy 를 이용해 EC2 에 프로젝트 코드 배포하기
        run: aws deploy create-deployment
          --application-name cicd-server2
          --deployment-config-name CodeDeployDefault.AllAtOnce
          --deployment-group-name Production
          --s3-location bucket=cicd-server2,bundleType=tgz,key=$GITHUB_SHA.tar.gz



==================== appspec.yml ====================
# 이 파일은 정확하게는 EC2에 설치된 CodeDeploy Agent 가 읽고 실행.
# files 부분은 S3 에 접근해서 build 된 파일을 다운로드 하는 것임.
# 파일 다운로드가 모두 완료하면, start-server.sh 셸 스크립트를 실행함.
version: 0.0
os: linux

files:
  # S3에 저장한 파일들 중 destination(AWS EC2) 으로 이동시킬 대상을 지정.
  # / 로 지정하면, S3에 저장된 전체 파일을 뜻함.
  - source: /
    # EC2 의 어떤 경로에 저장할지 지정
    destination: /home/ubuntu/cicd-server2

  # permissions 은 CodeDeploy 가 작업을 수행함에 있어,
  # 어떤 권한을 가지고 수행할 것인지에 대한 것임.
permissions:
  - object: /
    owner: ubuntu
    group: ubuntu

  # hooks 는 CodeDeploy 가 작업을 수행함에 있어, 여러 단계중에서,
  # ApplicationStart 는 애플리케이션 시작할 때 어떤 작업을 할건지를 작성하는 것임.
hooks:
  ApplicationStart:
    - location: scripts/start-server.sh
      timeout: 60
      runas: ubuntu

==================== start-server.sh ====================
#!/bin/bash

echo "-------------------- 서버 배포 시작 --------------------"
cd /home/ubuntu/cicd-server2
sudo fuser -k -n tcp 8080 || true
nohup java -jar project.jar > ./output.log 2>&1 &
echo "-------------------- 서버 배포 종료 --------------------"



######################## 방법4 : back end (Github Actions, Docker) ########################

1. 용도
   컨테이너 기반의 프로젝트에서 많이 사용되는 방법

2. 전체적인 흐름
   GitHub 에 push -> GithubAction 이벤트 감지 -> 빌드 파일 전송 -> AWS ECR
                                             -> AWS EC2

   빌드 파일 : Docker Image 생성 및 Docker Image 를 ECR 로 전달
   GithubAction 이벤트 감지 -> AWS EC2 :
             ECR 로부터 Docker Image 를 다운받아서 배포를 진행하도록 명령

3. 장점
   - Docker 기반으로 서비스를 운영할 때, 가장 간단하게 구성할 수 있는
     인프라 구조임.

4. 단점
   - 무중단 배포를 구현하거나 여러 EC2 인스턴스에 배포를 해야 하는 상황이라면,
     직접 Github Actions 에 스크립트를 작성해서 구현해야 함.
     직접 구현해보면 알겠지만, 생각보다 많이 복잡함.

5. 언제 사용하면 좋은지
   - 컨테이너 기반으로 인프라를 구성했을 때 이 방법을 많이 활용함.
   - 서버를 여러 대 운영하고 있지 않을 정도의 소규모 프로젝트일 때 주로
     활용함.

######################## 방법5 : back end (Github Actions, Docker, CodeDeploy) ########################

1. 용도
   컨테이너 기반의 프로젝트에서 많이 사용되는 방법

2. 전체적인 흐름
   GitHub 에 push -> GithubAction 이벤트 감지 -> 빌드 파일 전송 -> AWS ECR
                                             -> AWS S3
                                             -> AWS CodeDeploy -> AWS EC2 

   빌드 파일 : Docker Image 생성 및 Docker Image 를 ECR 로 전달
   GithubAction 이벤트 감지 -> AWS CodeDeploy -> AWS EC2 :
             EC2 한테 S3 로부터 CodeDeploy 관련 파일을 다운받은 뒤
             AWS ECR 로 부터 Docker Image 다운 후 배포

3. 장점
   - 컨테이너 기반의 서버가 여러 대이더라도 쉽게 자동 배포를 구축할 수 있음.
   - 쉽게 무중단 배포를 적용시킬 수 있음.

4. 단점
   - CodeDeploy 를 사용함으로써 인프라 구조가 복잡해짐.
     구조가 복잡해짐에 따라 관리할 포이트가 자동적으로 증가하게 됨으로,
     관리 비용, 유지보수 비용, 난이도, 트러블 슈팅 어려움, 복잡도가 증가.

5. 언제 사용하면 좋은지
   - 컨테이너 기반의 서버를 여러 대 이상 구동해야 하거나
     무중단 배포가 중요한 서비스일 때 주로 활용됨.


######################## 방법1 : front end (Github Actions, S3, Cloudfront) ########################

1. 전체적인 흐름
   GitHub 에 push -> GithubAction 이벤트 감지 -> 빌드 파일 전송 -> AWS S3
                                             -> Cloudfront

   GithubAction 이벤트 감지 -> Cloudfront : 캐시 무효화 명령